@app.route('/connection/<connection_name>', methods=['GET'])
def get_connection(connection_name):
    connections = load_connections()
    
    for connection_type, connection_list in connections.items():
        for connection in connection_list:
            if connection['name_of_connection'] == connection_name:
                return jsonify(connection)
    
    return jsonify({"error": "Connection not found"}), 404



    @app.route('/update_connection/<connection_name>', methods=['PUT'])
def update_connection(connection_name):
    yaml_file = 'connections.yaml'
    data = request.json

    if not connection_name:
        return jsonify({"error": "Connection name is required"}), 400

    if os.path.exists(yaml_file):
        with open(yaml_file, 'r') as file:
            existing_connections = yaml.safe_load(file) or {}
    else:
        return jsonify({"error": "YAML file not found"}), 404

    updated = False
    for connection_type, connection_list in existing_connections.items():
        for connection in connection_list:
            if connection['name_of_connection'] == connection_name:
                connection.update(data)
                updated = True
                break
    
    if not updated:
        return jsonify({"error": "Connection not found"}), 404

    with open(yaml_file, 'w') as file:
        yaml.dump(existing_connections, file)

    return jsonify({"message": "Connection updated successfully"}), 200









<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Connections</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-100">
    <div class="container mx-auto py-8">
        <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Manage Connections</h2>

        <!-- Connections Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white shadow-md rounded-lg">
                <thead>
                    <tr class="bg-blue-600 text-white">
                        <th class="py-3 px-6 text-left">Connection Name</th>
                        <th class="py-3 px-6 text-left">Connection Type</th>
                        <th class="py-3 px-6 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="connections-table-body" class="text-gray-700">
                    {% for type, connections in connections.items() %}
                    {% for connection in connections %}
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-6">{{ connection.name_of_connection }}</td>
                        <td class="py-3 px-6">{{ type | capitalize }}</td>
                        <td class="py-3 px-6 text-center">
                            <button onclick="editConnection('{{ connection.name_of_connection }}')" class="bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600 mr-2">Edit</button>
                            <button onclick="deleteConnection('{{ connection.name_of_connection }}')" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 mr-2">Delete</button>
                            <button onclick="testConnection('{{ connection.name_of_connection }}')" class="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600">Test</button>
                        </td>
                    </tr>
                    {% endfor %}
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Edit Connection Form -->
        <div id="edit-connection-form" class="bg-white p-8 rounded-lg shadow-lg w-full max-w-md mx-auto mt-10 hidden">
            <h3 class="text-2xl font-bold text-center text-gray-800 mb-8">Edit Connection</h3>
            <form id="connection-edit-form" onsubmit="updateConnection(event)">
                <div id="edit-fields-container" class="mb-6"></div>
                <div class="mt-6">
                    <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out">Update</button>
                </div>
            </form>
            <div id="edit-message" class="mt-4 text-center text-green-600"></div>
        </div>
    </div>

    <script>
        const connectionFields = {{ connection_fields | tojson }};
        let currentConnectionType = '';

        function editConnection(connectionName) {
            fetch(`/connection/${connectionName}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                        return;
                    }
                    currentConnectionType = data.connection_type;
                    document.getElementById('edit-connection-form').classList.remove('hidden');
                    populateEditForm(data);
                });
        }

        function populateEditForm(connectionData) {
            const fieldsContainer = document.getElementById('edit-fields-container');
            fieldsContainer.innerHTML = '';

            Object.keys(connectionData).forEach(field => {
                if (field === 'name_of_connection' || field === 'connection_type') return;

                const formGroup = document.createElement('div');
                formGroup.className = 'mb-4';

                const label = document.createElement('label');
                label.setAttribute('for', field);
                label.className = 'block text-gray-700 font-semibold mb-2';
                label.textContent = field.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

                const input = document.createElement('input');
                input.type = 'text';
                input.id = field;
                input.name = field;
                input.value = connectionData[field];
                input.className = 'w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500';

                formGroup.appendChild(label);
                formGroup.appendChild(input);
                fieldsContainer.appendChild(formGroup);
            });

            // Hidden input to hold connection name
            const hiddenNameInput = document.createElement('input');
            hiddenNameInput.type = 'hidden';
            hiddenNameInput.id = 'edit-name_of_connection';
            hiddenNameInput.name = 'name_of_connection';
            hiddenNameInput.value = connectionData.name_of_connection;
            fieldsContainer.appendChild(hiddenNameInput);

            // Hidden input to hold connection type
            const hiddenTypeInput = document.createElement('input');
            hiddenTypeInput.type = 'hidden';
            hiddenTypeInput.id = 'edit-connection_type';
            hiddenTypeInput.name = 'connection_type';
            hiddenTypeInput.value = connectionData.connection_type;
            fieldsContainer.appendChild(hiddenTypeInput);
        }

        function updateConnection(event) {
            event.preventDefault();
            const form = document.getElementById('connection-edit-form');
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => {
                data[key] = value;
            });

            fetch(`/update_connection/${data.name_of_connection}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    alert(data.message);
                    location.reload();
                }
            });
        }

        function deleteConnection(connectionName) {
            if (!confirm('Are you sure you want to delete this connection?')) return;

            fetch(`/delete_connection/${connectionName}`, {
                method: 'DELETE',
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    alert(data.message);
                    location.reload();
                }
            });
        }

        function testConnection(connectionName) {
            fetch(`/test_connection/${connectionName}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        alert(data.message);
                    }
                });
        }
    </script>
</body>

</html>
